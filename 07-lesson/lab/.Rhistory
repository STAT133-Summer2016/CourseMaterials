print("99 Bottles of Beer on the Wall.")
Sys.sleep(0.25)
print("99 Bottles of Beer!")
Sys.sleep(0.25)
print("Take one down, pass it around.")
Sys.sleep(0.25)
print("98 bottles of beer on the wall!")
print("99 Bottles of Beer on the Wall.")
Sys.sleep(0.5)
print("99 Bottles of Beer!")
Sys.sleep(0.5)
print("Take one down, pass it around.")
Sys.sleep(0.5)
print("98 bottles of beer on the wall!")
for (n in 99:1) {
print(str_c(n, " bottles of beer on the wall."))
print(str_c(n, " bottles of beer!"))
print("Take one down, pass it around.")
print(n-1, " bottles of beer on the wall!")
}
for (i in 1:3) {
i + 1
}
v <- c(0, 1, 0, 0, 0)
# This code will modify the third through fifth elements of v
for (i in 3:5) {
v[i] <- v[i-2] + v[i-1]
}
x <- data.frame(first_column = 1:3, second_column = 4:6, third_column = 7:9)
2^16*23
2^5*23381
n <- 748192
# The stop condition is the negation of the statement in the parentheses
while (n %% 2 == 0) {
print(n)
n <- n/2
}
HowManyFives <- function(n) {
counter <- 0 # Initialize a counter
while (n >= 5) {
n <- n - 5 # update the value of n
counter <- counter + 1 # update the counter
}
}
(HowManyFives(103))
HowManyFives <- function(n) {
counter <- 0 # Initialize a counter
while (n >= 5) {
n <- n - 5 # update the value of n
counter <- counter + 1 # update the counter
}
return(counter)
}
(HowManyFives(103))
data <- data.frame(a = c(99, 1,  2,   4,   3),
b = c( 1, 1,  0,   1,   0),
c = c( 5, 5, 10, 99, 5))
data <- data.frame(a = c(99, 1,  2,   4,   3),
b = c( 1, 1,  0,   1,   0),
c = c( 5, 5, 10, 99, 5))
replace <- function(f) {
for (i in 1:ncol(f)) {
if (i %% 2 != 0) {
replace(f[i], f[i] == '99', "NA")
}
}
return(f)
}
replace(df)
df
replace(data)
?replace
Fix99 <- function(x){
for(i in 1:nrow(x)){
for(j in seq(1,ncol(x),by=2)){
if (x[i,j] == 99){
x[i,j] <- NA
}
}
}
x
}
Fix99(data)
data
Fix99 <- function(df) {
idx <- seq(1, ncol(df), 2)
for (i in idx) {
df[[i]][df[[i]] == 99] <- NA
}
}
Fix99(data)
Fix99 <- function(df) {
idx <- seq(1, ncol(df), 2)
for (i in idx) {
df[[i]][df[[i]] == 99] <- NA
}
return(df)
}
Fix99(data)
fix99 = function(data) {
index = 1
for (i in names(data)) {
if (index %% 2 != 0) {
#print("here")
for (j in 1:length(data[[i]])) {
#print(names(data)[j])
if (data[j, i] == 99) {
#print(j)
data[j, i] = NA
}
}
}
index = index + 1
#print(index)
}
return(data)
}
fix99(data)
10:3
int_part <- 3 %% 1
n <- 3.245
int_part <- 3 %% 1
dec_part <- 3 // 1
n <- 3.245
int_part <- n %% 1
dec_part <- n // 1
dec_part <- n \\ 1
dec_part <- n %/% 1
dec_part <- n %% 1
n <- 3.245
dec_part <- n %% 1
cfrac <- numeric(0)
while (dec_part != 0) {
cfrac <- c(cfrac, n %/% 1)
n <- 1/dec_part
dec_part <- n %% 1
}
n <- 3.245
dec_part <- n %% 1
cfrac <- numeric(0)
while (dec_part != 0) {
cfrac <- c(cfrac, n %/% 1)
print(cfrac)
n <- 1/dec_part
dec_part <- n %% 1
}
