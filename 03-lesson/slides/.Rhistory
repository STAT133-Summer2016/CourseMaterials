install.packages("installr")
install.packages("installr")
install.Rtools()
install.Rtools
library(installr)
install.Rtools()
install.Rtools()
install.packages("devtools")
install.packages("ggplot2
")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("stringr")
?tabulate
x <- c(1, 2, 3, 4, 5)
which(x <= 3)
which(c(TRUE, TRUE, FALSE, TRUE, FALSE))
?which.min
x <- c(5, 5, 5, 3, 2)
which.max(x)
?tabulate
tabulate(c(1,1,1,1.1,2,2))
?unique
x <- (1, 1, 1, 2, 2, 3)
unique(x)
x <- (1, 1, 1, 2, 2, 3)
x <- c(1, 1, 1, 2, 2, 3)
unique(x)
x <- c(1, 100, 1000, 10000, 100000)
any(x > 10^6)
all(x <= 10^5)
all(x =< 10^5)
all(x <= 10^5)
seq(1, 6, 2)
seq(from = 1, to = 6, by = 2) # sequence
seq(1, 6) # by default, by is 1
x <- c(1, 2, 10)
y <- seq(1, 5)
x <- c(1, 2, 10)
y <- seq(1, 5)
x %in% y
x <- c(1, 1, 1, 2, 2, 3)
table(x)
y <- c("a", "a", "b", "b", "b", "c")
table(y)
longest_dep_delay <- max(flights$dep_delay)
library(nycflights13)
data(flights)
longest_dep_delay <- max(flights$dep_delay)
longest_dep_delay
flights$dep_delay
max(flights$dep_delay)
sum(is.na(flights$dep_delay))
?max
longest_dep_delay <- max(flights$dep_delay, na.rm = T)
longest_dep_delay
sort(flights$dep_delay)
sort(flights$dep_delay, T)
head(sort(flights$dep_delay, T))
longest_flights <- with(flights, arr_time - dep_time)
longest_flights
help(flights)
head(air_time, 10)
head(flights$air_time, 10)
head(sort(flights$air_time, 10))
head(sort(flights$air_time), 10)
head(sort(flights$air_time, decreasing = T), 10)
head(flights$arr_time)
head(flights$dep_time)
head(flights$air_time)
830-517
mean(dep_delay[carrier == "UA"])
ua_delay <- mean(flights$dep_delay[carrier == "UA"])
ua_delay <- mean(flights$dep_delay[flights$carrier == "UA"])
ua_delay
ua_delay <- mean(flights$dep_delay[flights$carrier == "UA"], na.rm = T)
ua_delay
length(unique(flights$tailnum[flights$carrier == "UA"]))
sum(is.na(flights$carrier))
sum(is.na(flights$tailnum))
num_planes_aa <- length(unique(flights$tailnum[flights$carrier == "UA"]))
num_planes_aa
jfk_1000mi <- length(flights$distance[flights$origin == "JFK"] > 1000)
jfk_1000mi
jfk_1000mi <- with(flights, length(distance[origin == "JFK"] > 1000))
jfk_1000mi
num_lga_dfw <- with(flights, origin == "LGA" & dest == "DFW")
num_lga_dfw
num_lga_dfw <- with(flights, length(origin == "LGA" & dest == "DFW"))
num_lga_dfw
num_lga_dfw <- with(flights, sum(origin == "LGA" & dest == "DFW"))
num_lga_dfw
num_planes_aa <- with(flights, length(unique(tailnum[carrier == "UA"])))
num_planes_aa
ua_delay <- with(flights, mean(dep_delay[carrier == "UA"], na.rm = T))
ua_delay
most_flights_jfk <- with(flights, sort(table(carrier[origin == "JFK"])))
most_flights_jfk
most_flights_jfk <- with(flights, sort(table(carrier[origin == "JFK"]), T))
most_flights_jfk
most_flights_jfk <- with(flights, sort(table(carrier[origin == "JFK"]), T))[1]
most_flights_jfk
most_flights_jfk <- name(with(flights, sort(table(carrier[origin == "JFK"]), T))[1])
most_flights_jfk
most_flights_jfk <- names(with(flights, sort(table(carrier[origin == "JFK"]), T))[1])
most_flights_jfk
most_flights_jfk <- names(with(flights, sort(table(carrier[origin == "JFK"]), decreasing = T))[1])
most_flights_jfk
flight_counts_out_jfk <- with(flights, table(carrier[origin == "JFK"]))
flight_counts_out_jfk
flight_counts_out_jfk <- with(flights, table(carrier[origin == "JFK"]))
most_flights_jfk <- names(sort(flight_counts_out_jfk, decreasing = T)[1])
most_flights_jfk
uniq_carriers <- unique(with(flights, carrier[origin == "JFK"]))
uniq_carriers
?tabulate
tabulate
uniq_carriers <- unique(with(flights, carrier[origin == "JFK"]))
most_flights_jfk <- which.max(tabulate(uniq_carriers %in% flights$carriers))
flight_counts_out_jfk <- with(flights, table(carrier[origin == "JFK"]))
most_flights_jfk <- names(sort(flight_counts_out_jfk, decreasing = T)[1])
most_flights_jfk
mean_delays <- with(flights,
c(mean(dep_delay[month == 1]),
mean(dep_delay[month == 2]),
mean(dep_delay[month == 3]),
mean(dep_delay[month == 4]),
mean(dep_delay[month == 5]),
mean(dep_delay[month == 6]),
mean(dep_delay[month == 7]),
mean(dep_delay[month == 8]),
mean(dep_delay[month == 9]),
mean(dep_delay[month == 10]),
mean(dep_delay[month == 11]),
mean(dep_delay[month == 12])))
mean_delays <- with(flights,
c(mean(dep_delay[month == 1], na.rm = T),
mean(dep_delay[month == 2], na.rm = T),
mean(dep_delay[month == 3], na.rm = T),
mean(dep_delay[month == 4], na.rm = T),
mean(dep_delay[month == 5], na.rm = T),
mean(dep_delay[month == 6], na.rm = T),
mean(dep_delay[month == 7], na.rm = T),
mean(dep_delay[month == 8], na.rm = T),
mean(dep_delay[month == 9], na.rm = T),
mean(dep_delay[month == 10], na.rm = T),
mean(dep_delay[month == 11], na.rm = T),
mean(dep_delay[month == 12], na.rm = T)))
month_delay <- order(mean_delays)
month_delay <- order(mean_delays, decreasing = T)
month_delay
?tapply
with(flights, tapply(dep_delay, month, mean, na.rm = T))
order(with(flights, tapply(dep_delay, month, mean, na.rm = T)))
install.packages("readr")
library(readr)
?read_csv
setwd("D:/teaching/2016_summer/stat133-su16/")
setwd("D:/teaching/2016_summer/s133-su16/")
setwd("D:/teaching/2016_summer/")
list.files()
setwd("stat133-su2016/03-lesson/lab")
list.files()
read_csv("tents.csv", col_types = "ccnnicc")
tents <- read_csv("tents.csv", col_types = "ccnniccc")
tents
tents <- read_csv("tents.csv", col_types = "ccnniccc")
str(tents)
?min
?quantile
quantile(tents$weight, 50)
quantile(tents$weight, .5)
iqr()
iqr
sd
?sd
with(tents[tents$price > 300], sum(brand == "big-agnes"))
with(tents[tents$price > 300,], sum(brand == "big-agnes"))
with(tents[tents$price > 300,], sum(brand == "big-agnes")/length(brand))
with(tents[tents$price > 300,], sum(brand == "big-agnes")/length(brand)*100)
with(tents, table(seasons, capacity))
getwd()
setwd("..")
library(slidify)
author("slides")
list.files()
# Vectors can only hold one type of data
# Everything converted into strings
c("a", "b", 1, 2, FALSE)
c(1, 0, FALSE)
class(c(1, 0, FALSE))
mode(c(1, 0, FALSE))
x <- c(1, 0, FALSE, TRUE)
x
typeof(x)
x
class(x)
withs(tents, mean(brand == "big-agnes" & price > 300) * 100)
with(tents, mean(brand == "big-agnes" & price > 300) * 100)
with(tents[tents], mean(brand[price > 300] == "big-agnes") * 100)
with(tents[tents], mean(brand[tents$price > 300] == "big-agnes") * 100)
with(tents, mean(brand[price > 300] == "big-agnes") * 100)
with(tents, 100 * mean(brand[price > 300] == "big-agnes"))
as.integer(c(1,2,3))
x <- as.integer(c(1,2,3))
x <- 1:3
typeof(x)
x <- c(1, 2, 3)
typeof(x)
x <- as.integer(x)
typeof(x)
as.numeric("1", "2", "9")
as.numeric(c("1", "2", "9"))
sum(c(T, F, T, F, F))
any(c(1, 1, 0, 0))
1 & 1
c(1, c(2, 3), c(4))
* Vectors are always 1-dimensional, even if you try to nest `c()`
```{r}
c(1, c(2, 3), c(4))
```
* This, in fact, is how you join vectors together
```{r}
x <- 1:3
y <- 4:6
c(x, y)
```
x <- c(a = 1, b = 2, c = 3)
x
x <- c(first = "a", second = "b", third = "c")
x
x["second"]
names(x)
x[c("first", "third")]
names(x)
names(x) <- c("alpha", "beta", "gamma")
x
list("a", 1, FALSE, 5 + 3i)
list(fruits = c("apples", "bananas", "cranberries"))
x <- list('first' = "a", 'second' = "b", 'third' = "c")
names(x)
names(x) <- c("apples", "bananas", "cherries")
x
?matrix
matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, byrow = FALSE)
?arraw
?array
array(c(1,2,3,4,5,6,7,8), dim = c(2, 2, 2))
df$x
df <- data.frame(x = seq(1, 3), y = c("a", "b", "c"), z = c(T, F, F))
df$x
df[["x"]]
df["x"]
