2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
)
)
codons <- data.frame(
dna_triplet = c("GCT", "GCC", "GCA", "GCG",
"CGT", "CGC", "CGA", "CGG", "AGA", "AGG",
"AAT", "AAC",
"GAT", "GAC",
"TGT", "TGC",
"CAA", "CAG",
"GAA", "GAG",
"GGT", "GGC", "GGA", "GGG",
"CAT", "CAC",
"ATT", "ATC", "ATA",
"TTA", "TTG", "CTT", "CTC", "CTA", "CTG",
"AAA", "AAG",
"TTT", "TTC",
"CCT", "CCC", "CCA", "CCG",
"TCT", "TCC", "TCA", "TCG", "AGT", "AGC",
"ACT", "ACC", "ACA", "ACG",
"TGG",
"TAT", "TAC",
"GTT", "GTC", "GTA", "GTG",
"ATG",
"TAA", "TGA", "TAG"),
amino_acid = rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Start", "Stop"),
each = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
)
)
sum(c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3))
counts <- c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
counts
length(rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Start", "Stop"),
each = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
))
?rep
length(rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Start", "Stop"),
times = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
))
codons <- data.frame(
dna_triplet = c("GCT", "GCC", "GCA", "GCG",
"CGT", "CGC", "CGA", "CGG", "AGA", "AGG",
"AAT", "AAC",
"GAT", "GAC",
"TGT", "TGC",
"CAA", "CAG",
"GAA", "GAG",
"GGT", "GGC", "GGA", "GGG",
"CAT", "CAC",
"ATT", "ATC", "ATA",
"TTA", "TTG", "CTT", "CTC", "CTA", "CTG",
"AAA", "AAG",
"TTT", "TTC",
"CCT", "CCC", "CCA", "CCG",
"TCT", "TCC", "TCA", "TCG", "AGT", "AGC",
"ACT", "ACC", "ACA", "ACG",
"TGG",
"TAT", "TAC",
"GTT", "GTC", "GTA", "GTG",
"ATG",
"TAA", "TGA", "TAG"),
amino_acid = rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Stop"),
times = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
3)
)
)
codons
?readr
library(readr)
setwd("..")
setwd("../..")
list.files()
setwd(list.files()[7])
list.files()
setwd("hw2")
write_csv(codons, "codons")
read_csv("codons")
codons
?str_sub
str_sub("GAGCCATGCATT", 1, 3)
dna <- "GAGCCATGCATT"
str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)
)
str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3))
which(codons$dna_triplet %in% str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)))
str_replace_all(str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)), codons$dna_triplet, codons$amino_acid)
codons <- read_csv("codons")
str_replace_all(str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)), codons$dna_triplet, codons$amino_acid)
?str_replace_all
str_replace_all(str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)), codons$dna_triplet, codons$amino_acid)
split <- str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3))
split
with(codons, str_replace_all(split, "GAG", "P")
)
replacements <- codons$amino_acid
names(replacements) <- codons$dna_triplet
str_replace_all(split, replacements)
dna <- "ATCTAGATAGTAGGC"
split <- str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3))
str_replace_all(split, replacements)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(nycflights13)
data(flights)
# Chunk 3
# To access a variable in a data frame as a vector, the syntax is:
# name_of_data_frame$name_of_variable
plane_max_ad <- flights$tailnum[which.max(flights$arr_delay)]
plane_max_ad
# Chunk 4
num_rows <- nrow(flights)
num_rows
# Chunk 5
num_vars <- ncol(flights)
num_vars
# Chunk 6
longest_dep_delay <- max(flights$dep_delay, na.rm = T)
longest_dep_delay
# Chunk 7
longest_flights <- head(sort(flights$air_time, decreasing = T), 10)
longest_flights
# Chunk 8
ua_delay <- with(flights, mean(dep_delay[carrier == "UA"], na.rm = T))
ua_delay
# Chunk 9
# Take note of how gruesome this is.  We'll learn some better ways soon.
mean_delays <- with(flights,
c(mean(dep_delay[month == 1], na.rm = T),
mean(dep_delay[month == 2], na.rm = T),
mean(dep_delay[month == 3], na.rm = T),
mean(dep_delay[month == 4], na.rm = T),
mean(dep_delay[month == 5], na.rm = T),
mean(dep_delay[month == 6], na.rm = T),
mean(dep_delay[month == 7], na.rm = T),
mean(dep_delay[month == 8], na.rm = T),
mean(dep_delay[month == 9], na.rm = T),
mean(dep_delay[month == 10], na.rm = T),
mean(dep_delay[month == 11], na.rm = T),
mean(dep_delay[month == 12], na.rm = T)))
month_delay <- order(mean_delays, decreasing = T)
month_delay
# Chunk 10
num_planes_aa <- with(flights, length(unique(tailnum[carrier == "UA"])))
num_planes_aa
# OR if you want to ignore the NA
num_planes_aa <- with(flights, length(omit.na(unique(tailnum[carrier == "UA"]))))
num_planes_aa
# Chunk 11
jfk_1000mi <- with(flights, length(distance[origin == "JFK"] > 1000))
jfk_1000mi
# Chunk 12
num_lga_dfw <- with(flights, sum(origin == "LGA" & dest == "DFW"))
num_lga_dfw
# Chunk 13
flight_counts_out_jfk <- with(flights, table(carrier[origin == "JFK"]))
most_flights_jfk <- names(sort(flight_counts_out_jfk, decreasing = T)[1])
most_flights_jfk
jfk_1000mi
set.seed(1)
letrs <- sample(letters, size = 100, replace = TRUE)
letrs
letrs <- paste(letrs, collapse = ", ")
letrs
set.seed(1)
letrs <- sample(letters, size = 100, replace = TRUE)
head(letrs)
letrs <- paste(letrs, collapse = '", ')
letrs
letrs <- sample(letters, size = 100, replace = TRUE)
letrs <- paste(letrs, collapse = "', ")
letrs
letrs <- sample(letters, size = 100, replace = TRUE)
letrs <- paste(letrs, collapse = "', '")
letrs
table(letrs)
letrs
letrs <- c('g', 'f', 'n', 'g', 'e', 'n', 'o', 'd', 'g', 's', 'y', 'c', 't', 'y',
'v', 'i', 'q', 'y', 'y', 'i', 'g', 'e', 'i', 'n', 'y', 'n', 'g', 'b',
'k', 'w', 'j', 'd', 'j', 'q', 'k', 'r', 'r', 'o', 'l', 'l', 'h', 'p',
'x', 'd', 'k', 'f', 'l', 'd', 'l', 'y', 't', 'y', 'm', 'p', 'm', 'c',
'g', 'm', 'j', 'y', 'n', 'i', 'h', 'u', 's', 'e', 'b', 't', 'q', 'e',
'b', 'c', 'j', 'e', 'h', 'e', 'g', 'e', 'm', 'u', 'a', 'n', 'w', 'j',
'b', 'd', 'i', 'e', 'd', 'f', 'f', 'd', 'z', 'i', 'n', 'r', 'c', 'd',
'b', 'y')
table(letrs)
letrs
paste(letrs, collapse = "")
library(dplyr)
str_count(letrs, c("a", "e", "i", "o", "u"))
letrs <- "gfngenodgsyctyviqyyigeinyngbkwjdjqkrrollhpxdkfldlytympmcgmjynihusebtq"
str_count(letrs, c("a", "e", "i", "o", "u"))
?str_count
x <- str_count(letrs, c("a", "e", "i", "o", "u"))
names(x) <- c("a", "e", "i", "o", "u")
x
colors()
?str_pad
str_pad(c("a", "abc", "abcdef"), 10)
library(nycflights13)
data(flights)
flight %>% filter(carrier == "UA") %>% select(tailnum) %>% distinct %>% nrow()
flights %>% filter(carrier == "UA") %>% select(tailnum) %>% distinct %>% nrow()
num_planes_aa <- with(flights, length(unique(tailnum[carrier == "AA"])))
num_planes_aa
# OR if you want to ignore the NA
num_planes_aa <- with(flights, length(na.omit(unique(tailnum[carrier == "AA"]))))
num_planes_aa
flights %>% filter(origin == "JFK", distance > 1000) %>% nrow()
jfk_1000mi <- with(flights, length(distance[origin == "JFK"] > 1000))
jfk_1000mi
jfk_1000mi <- with(flights, sum(distance[origin == "JFK"] > 1000))
jfk_1000mi
filter(flights, origin == "LGA", dest == "DFW") %>% nrow()
jfk_1000mi <- with(flights, sum(distance[origin == "JFK"] > 1000))
jfk_1000mi
num_lga_dfw <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_lga_dfw
num_carriers <- length(carriers)
carriers <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_carriers <- length(carriers)
num_lga_dfw
carriers <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_carriers <- length(carriers)
num_lga_dfw
num_lga_dfw <- length(carriers)
num_lga_dfw
carriers <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_lga_dfw <- length(carriers)
num_lga_dfw
jfk_1000mi <- with(flights, sum(distance[origin == "JFK"] > 1000))
jfk_1000mi
?read_csv
setwd("../05-lesson/lab")
list.files()
countries <- flags$name
flags <- read_csv("flags.csv")
countries <- flags$name
countries
?str_detect
?str_extract
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
?str_match
?str_locate
fruit <- c("apple", "banana", "pear", "pineapple")
str_locate(fruit, "a")
str_locate(fruit, "e")
str_subset(countrie, "^A")
str_subset(countries, "^A")
?str_sub
?str_replace
a <- ":-\\"
a
"(^_^\")"
b <- "(^_^\")"
print(b)
b
cat(b)
help(package = "stringr")
baws <- "Bo$$"
str_replace_all(baws, "\$", "s")
str_replace_all(baws, "\\$", "s")
setwd("../..")
library(slidify)
author("slides")
phone <- "[ (][0-9][0-9][0-9][- )][0-9][0-9][0-9][- ]
[0-9][0-9][0-9][0-9]"
phone2 <- "[0-9]{3}[- .][0-9]{3}[- .][0-9]{4}"
phone3 <- "[(][0-9]{3}[)][- .][0-9]{3}[- ()][0-9]{4}"
str_detect(email, phone2)
str_pad(1:100, 3, "left", 0)
library(stringr)
str_pad(1:100, 3, 0)
str_pad(1:100, 3, 'left', pad = '0')
file_nums <- str_pad(1:100, 3, 'left', pad = '0')
str_c("plot", file_nums, ".png")
?ignore.case
sum(str_detect(states, ignore.case("i")))
states <- rownames(USArrests)
sum(str_detect(states, ignore.case("i")))
sum(str_detect(states, [iI]))
sum(str_detect(states, "[iI]"))
sum(str_detect(states, "[^aA]"))
?ignore.case
sum(!str_detect(states, "a"))
?str_sub
?str_match
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187  ", "482 952 3315",
"239 923 8115 and 842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract(strings, phone)
str_match(strings, phone)
help(package = "stringr")
?str_subset
?invert_match
?coll
sum(str_detect(states, "[jJ]"))
?str_subset
str_subset(states, " ")
str_subset(states, "^W[a-z]*[^aeiou]")
states
str_subset(states, coll("([^i]*i){3}[^i]", ignore_case = T))
str_subset(states, coll("([^i]*i){3}[^i]*", ignore_case = T))
str_subset(states, "([^iI]*[iI]){3}[^iI]*")
?coll
str_subset(states, fixed("([^i]*i){3}[^i]*", ignore_case = T))
str_subset(states, fixed("([^iI]*i){3}[^iI]*", ignore_case = T))
i <- c("I", "\u0130", "i")
i
str_detect(i, fixed("i", TRUE))
str_subset(states, regex("([^iI]*i){3}[^iI]*", ignore_case = T))
?ignore.case
?regex
str_subset(states, "(.*[iI]){3}.*")
str_subset(states, "([^iI]*[iI]){3,}[^iI]*")
str_subset(states, "([^iI]*[iI]){3,}")
str_subset(states, "([^iI]*[iI]){3}")
str_subset(states, regex("^([^aeiou]*[aeiou]){5}[^aeiou]$", ignore_case = TRUE)
)
str_subset(states, regex("^([^aeiou]*[aeiou]){5}[^aeiou]*$", ignore_case = TRUE))
str_subset(states, regex("^(.*[aeiou]){5}.*$", ignore_case = TRUE))
five_vowels <- regex("^([^aeiou]*[aeiou]){5}[^aeiou]*$", ignore_case = TRUE)
str_subset(states, five_vowels)
str_subset(states, "[aeiou]{3}")
hex_regex <- "^#[0-9A-Fa-f]{6}$"
is_hex <- function(color) {
hex_regex <- "^#[0-9A-Fa-f]{6}$"
str_detect(color, hex_regex)
}
is_hex("#ff0000")  # TRUE
is_hex("#123456")  # TRUE
is_hex("#12Fb56")  # TRUE
is_hex("#1234GF")  # FALSE
is_hex("#1234567") # FALSE
is_hex("blue")     # FALSE
?str_sub
str_sub("Rictusempra", -1, -5)
str_sub("Rictusempra", -5, -1)
str_sub("Rictusempra", 1:5, 1:5)
seq(5,1)
reverse_chars <- function(string) {
idx <- seq(str_length(string), 1)
str_sub(string, idx, idx)
}
rev
?str_split
reverse_chars <- function(string) {
str_c(rev(str_split(string, "")[[1]]), collapse = "")
}
reverse_chars("Rictusempra")
reverse_chars("Lumox Maxima")
reverse_chars("Repello Muggletum")
remove_tag <- function(string) {
str_replace_all(string, "<[^>]*>", "")
}
phylo <- c("<common>dandelion<\common>",
"<genus>Taraxacum<\genus>",
"<kingdom>Plantae<\kingdom>")
remove_tag(phylo)
library(readr)
library(stringr)
remove_tag <- function(string) {
str_replace_all(string, "<[^>]*>", "")
}
phylo <- c("<common>dandelion<\common>",
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
?str_sub
seq(c(1, 3), 10, 3)
read_csv("codons")
setwd(../../hw2)
setwd("../../hw2")
codebook <- read_csv("codons")
names(codebook)
dna_to_aa <- function(dna) {
if (str_detect(dna, "[^CGAT]")) stop("Invalid DNA sequence")
codebook <- read_csv("codons")
len <- str_length(dna)
codons <- str_sub(dna, seq(1, len, 3), seq(3, len, 3))
aa <- with(codebook, amino_acid[codons %in% dna_triplet])
str_c(aa, collapse = "")
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
x <- 1:3
y <- 1:6
x %in% y
x == y
dna <- "GAGCCATGCATT"
len <- str_length(dna)
codons <- str_sub(dna, seq(1, len, 3), seq(3, len, 3))
aa <- with(codebook, amino_acid[])
str_c(aa, collapse = "")
aa
aa <- with(codebook, amino_acid[dna_triplet == codons])
aa
aa <- with(codebook, amino_acid[dna_triplet %in% codons])
aa
codons
library(dplyr)
filter(codebook, dna_triples %in% codons)
filter(codebook, dna_triplets %in% codons)
filter(codebook, dna_triplet %in% codons)
which_aa <- which(dna_triplet %in% codons, arr.ind = T)
which_aa <- which(codebook$dna_triplet %in% codons, arr.ind = T)
which_aa
which_aa <- which(codebook$dna_triplet %in% codons, arr.ind = T)
str_c(codebook$amino_acid[which_aa], collapse = "")
which_aa <- which(codebook$dna_triplet == codons, arr.ind = T)
str_c(codebook$amino_acid[which_aa], collapse = "")
which_aa <- which(codebook$dna_triplet %in% codons)
which_aa
str_c(codebook$amino_acid[which_aa], collapse = "")
codons
codebook$dna_triplet[16]
codebook$dna_triplet
codons
which_aa
?which
?which
codebook$dna_triplet %in% codons
which_aa <- which(codebook$dna_triplet == codons)
which_aa
which_aa <- which(codons %in% codebook$dna_triplet)
which_aa
which_aa <- which(codons %in% codebook$dna_triplet, arr.ind = T)
which_aa
which_aa <- match(codons, codebook$dna_triplet)
which_aa
str_c(codebook$amino_acid[which_aa], collapse = "")
dna_to_aa <- function(dna) {
if (str_detect(dna, "[^CGAT]")) stop("Invalid DNA sequence")
codebook <- read_csv("codons")
len <- str_length(dna)
codons <- str_sub(dna, seq(1, len, 3), seq(3, len, 3))
which_aa <- match(codons, codebook$dna_triplet)
str_c(codebook$amino_acid[which_aa], collapse = "")
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
match
?%in%
?"%in%"
aa <- codebook$amino_acid
names(aa) <- codebook$dna_triplet
str_replace_all(codons, aa)
dna_to_aa <- function(dna) {
if (str_detect(dna, "[^CGAT]")) stop("Invalid DNA sequence")
codebook <- read_csv("codons")
aa <- codebook$amino_acid
names(aa) <- codebook$dna_triplet
len <- str_length(dna)
codons <- str_sub(dna, seq(1, len, 3), seq(3, len, 3))
pp <- str_replace_all(codons, aa)
str_c(pp, collapse = "")
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
