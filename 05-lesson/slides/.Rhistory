sprintf("hello world")
class(sprintf("hello world"))
class(print("hello"))
class("hello")
?sprintf
states <- rownames(USArrests)
states
?str_count
library(stringr)
?str_count
?rev
str_sub("lumox", c(1:5), c(1:5)) <- str_sub("lumox", 5:1, 5:1)
str_sub("lumox", 1:5, 1:5) <- str_sub("lumox", 5:1, 5:1)
spell <- "lumox"
str_sub(spell, 1:5, 1:5) <- str_sub(spell, 5:1, 5:1)
spell
?str_sub
str_c(str_sub(spell, 5:1, 5:1), collapse = "")
?str_split
str_split(spell, "")
spell <- "lumox maxima"
str_split(spell, "")
str_c(rev(str_split(spell, "")), collapse = "")
str_c((str_split(spell, "")), collapse = "")
str_c(str_split(spell, ""), collapse = "")
spell <- "lumox maxima"
str_c(rev(str_split(spell, "")), collapse = "")
spell
str_c(str_split(spell, ""), collapse = "")
str_split(spell, "")
?str_split
str_c(rev(str_split(spell, "")[[1]]), collapse = "")
str_c(rev(str_split("hello there friend", " ")[[1]]), collapse = "")
str_c(rev(str_split("hello there friend", " ")[[1]]), collapse = " ")
str_c("plot", 1:100)
?str_pad
str_c("plot", str_pad(1:100, 3, side = "left", pad = "0")
)
states
str_c(states, "has", str_length(states), "letters in it.")
str_c(states, "has", str_length(states), "letters in it.", sep = " ")
data.frame(dna_triplet = c("GCT", "GCC", "GCA", "GCG",
"CGT", "CGC", "CGA", "CGG", "AGA", "AGG",
"AAT", "AAC",
"GAT", "GAC",
"TGT", "TGC",
"CAA", "CAG",
"GAA", "GAG",
"GGT", "GGC", "GGA", "GGG",
"CAT", "CAC",
"ATT", "ATC", "ATA",
"TTA", "TTG", "CTT", "CTC", "CTA", "CTG",
"AAA", "AAG",
"TTT", "TTC",
"CCT", "CCC", "CCA", "CCG",
"TCT", "TCC", "TCA", "TCG", "AGT", "AGC",
"ACT", "ACC", "ACA", "ACG",
"TGG",
"TAT", "TAC",
"GTT", "GTC", "GTA", "GTG",
"ATG",
"TAA", "TGA", "TAG"),
amino_acid = rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Start", "Stop")
each = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
)
)
codons <- data.frame(
dna_triplet = c("GCT", "GCC", "GCA", "GCG",
"CGT", "CGC", "CGA", "CGG", "AGA", "AGG",
"AAT", "AAC",
"GAT", "GAC",
"TGT", "TGC",
"CAA", "CAG",
"GAA", "GAG",
"GGT", "GGC", "GGA", "GGG",
"CAT", "CAC",
"ATT", "ATC", "ATA",
"TTA", "TTG", "CTT", "CTC", "CTA", "CTG",
"AAA", "AAG",
"TTT", "TTC",
"CCT", "CCC", "CCA", "CCG",
"TCT", "TCC", "TCA", "TCG", "AGT", "AGC",
"ACT", "ACC", "ACA", "ACG",
"TGG",
"TAT", "TAC",
"GTT", "GTC", "GTA", "GTG",
"ATG",
"TAA", "TGA", "TAG"),
amino_acid = rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Start", "Stop"),
each = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
)
)
sum(c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3))
counts <- c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
counts
length(rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Start", "Stop"),
each = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
))
?rep
length(rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Start", "Stop"),
times = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
1, 3)
))
codons <- data.frame(
dna_triplet = c("GCT", "GCC", "GCA", "GCG",
"CGT", "CGC", "CGA", "CGG", "AGA", "AGG",
"AAT", "AAC",
"GAT", "GAC",
"TGT", "TGC",
"CAA", "CAG",
"GAA", "GAG",
"GGT", "GGC", "GGA", "GGG",
"CAT", "CAC",
"ATT", "ATC", "ATA",
"TTA", "TTG", "CTT", "CTC", "CTA", "CTG",
"AAA", "AAG",
"TTT", "TTC",
"CCT", "CCC", "CCA", "CCG",
"TCT", "TCC", "TCA", "TCG", "AGT", "AGC",
"ACT", "ACC", "ACA", "ACG",
"TGG",
"TAT", "TAC",
"GTT", "GTC", "GTA", "GTG",
"ATG",
"TAA", "TGA", "TAG"),
amino_acid = rep(c("A", "R", "N", "D", "C",
"Q", "E", "G", "H", "I",
"L", "K", "M", "F", "P",
"S", "T", "W", "Y", "V",
"Stop"),
times = c(4, 6, 2, 2, 2,
2, 2, 4, 2, 3,
6, 2, 1, 2, 4,
6, 4, 1, 2, 4,
3)
)
)
codons
?readr
library(readr)
setwd("..")
setwd("../..")
list.files()
setwd(list.files()[7])
list.files()
setwd("hw2")
write_csv(codons, "codons")
read_csv("codons")
codons
?str_sub
str_sub("GAGCCATGCATT", 1, 3)
dna <- "GAGCCATGCATT"
str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)
)
str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3))
which(codons$dna_triplet %in% str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)))
str_replace_all(str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)), codons$dna_triplet, codons$amino_acid)
codons <- read_csv("codons")
str_replace_all(str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)), codons$dna_triplet, codons$amino_acid)
?str_replace_all
str_replace_all(str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3)), codons$dna_triplet, codons$amino_acid)
split <- str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3))
split
with(codons, str_replace_all(split, "GAG", "P")
)
replacements <- codons$amino_acid
names(replacements) <- codons$dna_triplet
str_replace_all(split, replacements)
dna <- "ATCTAGATAGTAGGC"
split <- str_sub(dna, seq(1, str_length(dna), 3), seq(3, str_length(dna), 3))
str_replace_all(split, replacements)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(nycflights13)
data(flights)
# Chunk 3
# To access a variable in a data frame as a vector, the syntax is:
# name_of_data_frame$name_of_variable
plane_max_ad <- flights$tailnum[which.max(flights$arr_delay)]
plane_max_ad
# Chunk 4
num_rows <- nrow(flights)
num_rows
# Chunk 5
num_vars <- ncol(flights)
num_vars
# Chunk 6
longest_dep_delay <- max(flights$dep_delay, na.rm = T)
longest_dep_delay
# Chunk 7
longest_flights <- head(sort(flights$air_time, decreasing = T), 10)
longest_flights
# Chunk 8
ua_delay <- with(flights, mean(dep_delay[carrier == "UA"], na.rm = T))
ua_delay
# Chunk 9
# Take note of how gruesome this is.  We'll learn some better ways soon.
mean_delays <- with(flights,
c(mean(dep_delay[month == 1], na.rm = T),
mean(dep_delay[month == 2], na.rm = T),
mean(dep_delay[month == 3], na.rm = T),
mean(dep_delay[month == 4], na.rm = T),
mean(dep_delay[month == 5], na.rm = T),
mean(dep_delay[month == 6], na.rm = T),
mean(dep_delay[month == 7], na.rm = T),
mean(dep_delay[month == 8], na.rm = T),
mean(dep_delay[month == 9], na.rm = T),
mean(dep_delay[month == 10], na.rm = T),
mean(dep_delay[month == 11], na.rm = T),
mean(dep_delay[month == 12], na.rm = T)))
month_delay <- order(mean_delays, decreasing = T)
month_delay
# Chunk 10
num_planes_aa <- with(flights, length(unique(tailnum[carrier == "UA"])))
num_planes_aa
# OR if you want to ignore the NA
num_planes_aa <- with(flights, length(omit.na(unique(tailnum[carrier == "UA"]))))
num_planes_aa
# Chunk 11
jfk_1000mi <- with(flights, length(distance[origin == "JFK"] > 1000))
jfk_1000mi
# Chunk 12
num_lga_dfw <- with(flights, sum(origin == "LGA" & dest == "DFW"))
num_lga_dfw
# Chunk 13
flight_counts_out_jfk <- with(flights, table(carrier[origin == "JFK"]))
most_flights_jfk <- names(sort(flight_counts_out_jfk, decreasing = T)[1])
most_flights_jfk
jfk_1000mi
set.seed(1)
letrs <- sample(letters, size = 100, replace = TRUE)
letrs
letrs <- paste(letrs, collapse = ", ")
letrs
set.seed(1)
letrs <- sample(letters, size = 100, replace = TRUE)
head(letrs)
letrs <- paste(letrs, collapse = '", ')
letrs
letrs <- sample(letters, size = 100, replace = TRUE)
letrs <- paste(letrs, collapse = "', ")
letrs
letrs <- sample(letters, size = 100, replace = TRUE)
letrs <- paste(letrs, collapse = "', '")
letrs
table(letrs)
letrs
letrs <- c('g', 'f', 'n', 'g', 'e', 'n', 'o', 'd', 'g', 's', 'y', 'c', 't', 'y',
'v', 'i', 'q', 'y', 'y', 'i', 'g', 'e', 'i', 'n', 'y', 'n', 'g', 'b',
'k', 'w', 'j', 'd', 'j', 'q', 'k', 'r', 'r', 'o', 'l', 'l', 'h', 'p',
'x', 'd', 'k', 'f', 'l', 'd', 'l', 'y', 't', 'y', 'm', 'p', 'm', 'c',
'g', 'm', 'j', 'y', 'n', 'i', 'h', 'u', 's', 'e', 'b', 't', 'q', 'e',
'b', 'c', 'j', 'e', 'h', 'e', 'g', 'e', 'm', 'u', 'a', 'n', 'w', 'j',
'b', 'd', 'i', 'e', 'd', 'f', 'f', 'd', 'z', 'i', 'n', 'r', 'c', 'd',
'b', 'y')
table(letrs)
letrs
paste(letrs, collapse = "")
library(dplyr)
str_count(letrs, c("a", "e", "i", "o", "u"))
letrs <- "gfngenodgsyctyviqyyigeinyngbkwjdjqkrrollhpxdkfldlytympmcgmjynihusebtq"
str_count(letrs, c("a", "e", "i", "o", "u"))
?str_count
x <- str_count(letrs, c("a", "e", "i", "o", "u"))
names(x) <- c("a", "e", "i", "o", "u")
x
colors()
?str_pad
str_pad(c("a", "abc", "abcdef"), 10)
library(nycflights13)
data(flights)
flight %>% filter(carrier == "UA") %>% select(tailnum) %>% distinct %>% nrow()
flights %>% filter(carrier == "UA") %>% select(tailnum) %>% distinct %>% nrow()
num_planes_aa <- with(flights, length(unique(tailnum[carrier == "AA"])))
num_planes_aa
# OR if you want to ignore the NA
num_planes_aa <- with(flights, length(na.omit(unique(tailnum[carrier == "AA"]))))
num_planes_aa
flights %>% filter(origin == "JFK", distance > 1000) %>% nrow()
jfk_1000mi <- with(flights, length(distance[origin == "JFK"] > 1000))
jfk_1000mi
jfk_1000mi <- with(flights, sum(distance[origin == "JFK"] > 1000))
jfk_1000mi
filter(flights, origin == "LGA", dest == "DFW") %>% nrow()
jfk_1000mi <- with(flights, sum(distance[origin == "JFK"] > 1000))
jfk_1000mi
num_lga_dfw <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_lga_dfw
num_carriers <- length(carriers)
carriers <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_carriers <- length(carriers)
num_lga_dfw
carriers <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_carriers <- length(carriers)
num_lga_dfw
num_lga_dfw <- length(carriers)
num_lga_dfw
carriers <- with(flights, unique(carrier[origin == "LGA" & dest == "DFW"]))
num_lga_dfw <- length(carriers)
num_lga_dfw
jfk_1000mi <- with(flights, sum(distance[origin == "JFK"] > 1000))
jfk_1000mi
?read_csv
setwd("../05-lesson/lab")
list.files()
countries <- flags$name
flags <- read_csv("flags.csv")
countries <- flags$name
countries
?str_detect
?str_extract
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
?str_match
?str_locate
fruit <- c("apple", "banana", "pear", "pineapple")
str_locate(fruit, "a")
str_locate(fruit, "e")
str_subset(countrie, "^A")
str_subset(countries, "^A")
?str_sub
?str_replace
a <- ":-\\"
a
"(^_^\")"
b <- "(^_^\")"
print(b)
b
cat(b)
help(package = "stringr")
baws <- "Bo$$"
str_replace_all(baws, "\$", "s")
str_replace_all(baws, "\\$", "s")
setwd("../..")
library(slidify)
author("slides")
phone <- "[ (][0-9][0-9][0-9][- )][0-9][0-9][0-9][- ]
[0-9][0-9][0-9][0-9]"
phone2 <- "[0-9]{3}[- .][0-9]{3}[- .][0-9]{4}"
phone3 <- "[(][0-9]{3}[)][- .][0-9]{3}[- ()][0-9]{4}"
str_detect(email, phone2)
